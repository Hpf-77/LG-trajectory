%xbohm 理论 计算位置空间玻姆轨迹


%clear all
%clc

%初始值设置
l1 = 3;
l2 = -3;
p = 0;
w0 =0.5;                        % 束腰
lamd = 810e-6;                 %波长 单位 mm
h = 1;                        % 步长，z轴间隔
zmax = 510;            %最远传播距离
z0 = 500;                   %初始z0平面
c = 3e11;                      %光速，单位mm

 %初始半径
r = [0.313100694406838,0.351803385778615,0.377548884018578,0.397504685316202,0.414100237181341,0.428476695828601,0.441268389747828,0.452867066582464,0.463532902026723,0.473448173615703,0.482745934381567,0.491526522263519,0.499867638499543,0.507830796655187,0.515465612293277,0.522812750509780,0.529906008022914,0.536773819390222,0.543440369492131,0.549926430354838,0.556250000904537,0.562426803202000,0.568470672410055,0.574393866897141,0.580207317507805,0.585920829927915,0.591543250480283,0.597082603119061,0.602546203530372,0.607940754880536,0.613272428738289,0.618546933935193,0.623769575550170,0.628945305761308,0.634078767966092,0.639174335305012,0.644236144514712,0.649268125872094,0.654274029859941,0.659257451080260,0.664221849857859,0.669170571909468,0.674106866399549,0.679033902660383,0.683954785819042,0.688872571545932,0.693790280117597,0.698710909969494,0.703637450901777,0.708572897092319,0.713520260065868,0.718482581766166,0.723462947879008,0.728464501558501,0.733490457716418,0.738544118045763,0.743628886964745,0.748748288686990,0.753905985648540,0.759105798553025,0.764351728334466,0.769647980383966,0.774998991444112,0.780409459645588,0.785884378247548,0.791429073750892,0.797049249186926,0.802751033550151,0.808541038552124,0.814426424135823,0.820414974522839,0.826515186991126,0.832736376128575,0.839088797018522,0.845583791744115,0.852233964829172,0.859053394877118,0.866057891890032,0.873265312785205,0.880695951830323,0.888373028623306,0.896323304666845,0.904577871811508,0.913173173913895,0.922152350336420,0.931567032055998,0.941479787953649,0.951967527905419,0.963126353331269,0.975078668584843,0.987983958310492,1.00205577950457,1.01758987111427,1.03501351915645,1.05497914632298,1.07856079815797,1.10773050912934,1.14680113328517,1.20902921149370];
[ra,rb] = size(r);

%初始角度   每个周期分成16份，共6个周期
theta = [0.0410614462026979,0.0830869203583398,0.127217977730513,0.175043919041143,0.229160595396447,0.294633288467099,0.383741950178868,0.523598775598299,0.663455601015612,0.752564262729499,0.818036955797960,0.872153632155455,0.919979573611736,0.964110630839040,1.00613610499390,1.04719755119660,1.08825899739930,1.13028447155494,1.17441552892711,1.22224147023774,1.27635814659305,1.34183083966370,1.43093950137547,1.57079632679490,1.71065315221221,1.79976181392610,1.86523450699456,1.91935118335205,1.96717712480833,2.01130818203564,2.05333365619050,2.09439510239320,2.13545654859589,2.17748202275154,2.22161308012371,2.26943902143434,2.32355569778964,2.38902839086029,2.47813705257206,2.61799387799149,2.75785070340881,2.84695936512269,2.91243205819116,2.96654873454865,3.01437467600493,3.05850573323224,3.10053120738709,3.14159265358979,3.18265409979249,3.22467957394813,3.26881063132031,3.31663657263094,3.37075324898624,3.43622594205689,3.52533460376866,3.66519142918809,3.80504825460541,3.89415691631929,3.95962960938775,4.01374628574525,4.06157222720153,4.10570328442883,4.14772875858369,4.18879020478639,4.22985165098909,4.27187712514473,4.31600818251690,4.36383412382753,4.41795080018284,4.48342349325349,4.57253215496526,4.71238898038469,4.85224580580200,4.94135446751589,5.00682716058435,5.06094383694185,5.10876977839813,5.15290083562543,5.19492630978029,5.23598775598299,5.27704920218569,5.31907467634133,5.36320573371350,5.41103167502413,5.46514835137944,5.53062104445009,5.61972970616186,5.75958653158129,5.89944335699860,5.98855201871249,6.05402471178095,6.10814138813844,6.15596732959472,6.20009838682203,6.24212386097689,6.28318530717959];
[ta,tb] = size (theta);
jmax = tb;

%叠加系数a
a1 =sqrt(1)/sqrt(10);
a2 =sqrt(9)/sqrt(10);


%构建LG光束
syms x;
syms y;
syms z;

LGlight_ph1 = exp(-1i * l1 * atan2(y,x));
LGlight_ph2 = exp(-1i * l2 * atan2(y,x));
LGlight_01 = a1*LGlight (l1,p,w0,lamd);
LGlight_02 = a2*LGlight (l2,p,w0,lamd);

LGlight_full = LGlight_01 * LGlight_ph1 + LGlight_02 * LGlight_ph2 ;
LGlight_c = conj(LGlight_full) * LGlight_full;


%初始值分配内存
zlab = z0:h:zmax;                        %z列表
[a,b] = size(zlab);
xlab = zeros (jmax,b,rb);                %（角度，z，半径）
ylab = xlab;
Vxlab = xlab;
Vylab = xlab;
Vzlab = xlab;
rlab = zeros (rb, b) ;
Vrlab = rlab;
pxlab = xlab;
pylab = xlab;
rlab(:, 1) = r';
lg_c = zeros(1,b);

jmaxrb = jmax *rb;
picmodel = zeros (jmaxrb,b);     
Xmodel = picmodel;
Ymodel = picmodel;
 
%xbohm  速度 
syms x;
syms y;
syms z;
dLGx1 = diff(LGlight_01,x)*LGlight_ph1 + (LGlight_01 * LGlight_ph1) * (-1i * l1 * (-y) / ((x)^2+y^2));     %LG光束对x求偏导
dLGy1 = diff(LGlight_01,y)*LGlight_ph1 + (LGlight_01 * LGlight_ph1) * (-1i * l1 * (x) / ((x)^2+y^2));      %LG光束对y求偏导
dLGx2 = diff(LGlight_02,x)*LGlight_ph2 + (LGlight_02 * LGlight_ph2) * (-1i * l2 * (-y) / ((x)^2+y^2));     %LG光束对x求偏导
dLGy2 = diff(LGlight_02,y)*LGlight_ph2 + (LGlight_02 * LGlight_ph2) * (-1i * l2 * (x) / ((x)^2+y^2));      %LG光束对y求偏导
vxpre = -1i *conj(LGlight_full) * (dLGx1+dLGx2)/abs(LGlight_full)^2;    %还是 多项式 的形状
vypre = -1i *conj(LGlight_full) * (dLGy1+dLGy2)/abs(LGlight_full)^2;
LGlight_C = abs(LGlight_full)^2;


%玻姆轨迹计算

for i = 1:1:b-1                      % z   计算每个z平面上的玻姆速度
                                   %每条轨迹上的点 

         z = zlab(i);

   for t = 1:rb    %      计算平面上的玻姆速度，以及下个平面上的对应点。

   %初始平面值
   y0 = r(t)*sin(theta');         
   x0 = r(t)*cos(theta');

   xlab(:,1,t) = x0(1:jmax);
   ylab(:,1,t) = y0(1:jmax);

   %通过当前平面计算下一 z 平面的速度和位置
        x = xlab(:,i,t);
        y = ylab(:,i,t);
        vx = eval(vxpre);                                        %当前平面速度
        vy = eval(vypre);        
        Vx = lamd /(2*pi) * real(vx);
        Vy = lamd / (2*pi) * real(vy);
        Vz = sqrt(1-conj(Vx).*Vx - conj(Vy).*Vy );
        dx = (zlab(i+1) - zlab(i))./Vz .* Vx ;            %两平面上位置差值
        dy = (zlab(i+1) - zlab(i))./Vz .* Vy ;
        xlab(:,i+1,t) = xlab(:,i,t)+dx;                       %下一平面位置
        ylab(:,i+1,t) = ylab(:,i,t) + dy;
        rlab(t,i+1) = sqrt(xlab(1,i+1,t)^2 + ylab(1,i+1,t)^2);
        Vxlab(:,i,t) = Vx;
        Vylab(:,i,t) = Vy;
        Vzlab(:,i,t) = Vz;
        
        
        xyz = eval(LGlight_c);   %上式求的某点的光强
        
        Wline = xyz  ;   

        for tp = 1:1:jmax                                        %该循环的目的是将二维平面压缩成线，便于画散点图
            
            
            xyzi = (t-1)*jmax+tp;
            picmodel(xyzi,i) = Wline(tp);
            Xmodel(xyzi,i) = xlab(tp,i,t) ;           
            Ymodel(xyzi,i) =ylab(tp,i,t) ;
        end

   end


end
